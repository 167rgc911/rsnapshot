.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "rsnapshot 1"
.TH rsnapshot 1 "2005-01-26" "" ""
.SH "NAME"
rsnapshot \- remote filesystem snapshot utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBrsnapshot\fR [\fB\-vtxqVD\fR] [\fB\-c\fR cfgfile] [command]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBrsnapshot\fR is a filesystem snapshot utility. It can take incremental
snapshots of local and remote filesystems for any number of machines.
.PP
Local filesystem snapshots are handled with \fB\f(BIrsync\fB\|(1)\fR. Secure remote
connections are handled with rsync over \fB\f(BIssh\fB\|(1)\fR, while anonymous
rsync connections simply use an rsync server. Both remote and local
transfers depend on rsync.
.PP
\&\fBrsnapshot\fR saves much more disk space than you might imagine. The amount
of space required is roughly the size of one full backup, plus a copy
of each additional file that is changed. \fBrsnapshot\fR makes extensive
use of hard links, so if the file doesn't change, the next snapshot is
simply a hard link to the exact same file.
.PP
\&\fBrsnapshot\fR will typically be invoked as root by a cron job, or series
of cron jobs. It is possible, however, to run as any arbitrary user
with an alternate configuration file.
.PP
All important options are specified in a configuration file, which is
located by default at \fB/etc/rsnapshot.conf\fR. An alternate file can be
specified on the command line. There are also additional options which
can be passed on the command line.
.PP
The command line options are as follows:
.Sp
.RS 4
\&\fB\-v\fR verbose, show shell commands being executed
.Sp
\&\fB\-t\fR test, show shell commands that would be executed
.Sp
\&\fB\-c\fR path to alternate config file
.Sp
\&\fB\-x\fR one filesystem, don't cross partitions within each backup point
.Sp
\&\fB\-q\fR quiet, suppress non-fatal warnings
.Sp
\&\fB\-V\fR same as \-v, but with more detail
.Sp
\&\fB\-D\fR a firehose of diagnostic information
.RE
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
\&\fB/etc/rsnapshot.conf\fR is the default configuration file. All parameters
in this file must be separated by tabs. \fB/etc/rsnapshot.conf.default\fR
can be used as a reference.
.PP
It is recommended that you copy \fB/etc/rsnapshot.conf.default\fR to
\&\fB/etc/rsnapshot.conf\fR, and then modify \fB/etc/rsnapshot.conf\fR to suit
your needs.
.PP
Here is a list of allowed parameters:
.Sp
.RS 4
\&\fBsnapshot_root\fR  Local filesystem path to save all snapshots
.Sp
\&\fBno_create_root\fR If set to 1, rsnapshot won't create snapshot_root directory
.Sp
\&\fBcmd_rsync\fR      Full path to rsync (required)
.Sp
\&\fBcmd_ssh\fR        Full path to ssh (optional)
.Sp
\&\fBcmd_cp\fR         Full path to cp  (optional, but must be \s-1GNU\s0 version)
.Sp
\&\fBcmd_rm\fR         Full path to rm  (optional)
.Sp
\&\fBcmd_logger\fR     Full path to logger (optional, for syslog support)
.Sp
\&\fBcmd_du\fR         Full path to du (optional, for disk usage reports)
.Sp
.RS 4
If you have \s-1GNU\s0 cp, you should uncomment cmd_cp, since you will get extra
functionality. If you don't have \s-1GNU\s0 cp, leave it commented out, and
rsnapshot will work almost as well. If you are using Linux, you have \s-1GNU\s0
cp. If you're on \s-1BSD\s0, Solaris, \s-1IRIX\s0, etc., then there's a good chance you
don't have the right version. Never fear, you still have options. You can
get \s-1GNU\s0 cp set up on your system (possibly in an alternate path so as to
not conflict with your existing version). Or, if you only need support
for normal files, directories, and symlinks, you can just leave cmd_cp
commented out and rsnapshot will use a built-in perl substitute. This
will run about 40% slower, and will not let you back up the following
types of files:
.Sp
.RS 4
\&\s-1FIFO\s0
.Sp
Socket
.Sp
Block / Character devices
.RE
.RE
.RS 4
.Sp
Furthermore, hard links to symlinks are not portable, so new symlinks
will be created when they need to be copied.
.RE
.RE
.RS 4
.Sp
\&\fBinterval\fR      [name] [number]
.Sp
.RS 4
\&\*(L"name\*(R" refers to the name of this interval (i.e. hourly, daily). \*(L"number\*(R"
is the number of snapshots for this type of interval that will be stored.
The value of \*(L"name\*(R" will be the command passed to \fBrsnapshot\fR to perform
this type of backup.
.Sp
Example: \fBinterval hourly 6\fR
.Sp
[root@localhost]# \fBrsnapshot hourly\fR
.Sp
For this example, every time this is run, the following will happen:
.Sp
<snapshot_root>/hourly.5/ will be deleted, if it exists.
.Sp
<snapshot_root>/hourly.{1,2,3,4} will all be rotated +1, if they exist.
.Sp
<snapshot_root>/hourly.0/ will be copied to <snapshot_root>/hourly.1/
using hard links.
.Sp
Each backup point (explained below) will then be rsynced to the
corresponding directories in <snapshot_root>/hourly.0/
.Sp
Intervals must be specified in the config file in order, from most
frequent to least frequent. The first entry is the one which will be
synced with the backup points. The subsequent intervals (i.e. daily,
weekly, etc) simply rotate, with each higher interval pulling from the
one below it for its .0 directory.
.Sp
Example:
.Sp
.RS 4
\&\fBinterval  hourly 6\fR
.Sp
\&\fBinterval  daily  7\fR
.Sp
\&\fBinterval  weekly 4\fR
.RE
.RE
.RS 4
.Sp
daily.0/ will be copied from hourly.5/, and weekly.0/ will be copied from daily.6/
.Sp
hourly.0/ will be rsynced directly from the filesystem.
.RE
.RE
.RS 4
.Sp
\&\fBlink_dest           1\fR
.Sp
.RS 4
If your version of rsync supports \-\-link\-dest (2.5.7 or newer), you can enable
this to let rsync handle some things that \s-1GNU\s0 cp or the built-in subroutines would
otherwise do. The only drawback is that if a host becomes unavailable during
a backup operation, the last good files will get rotated up, and a full re-sync
will be required on the next pass.
.RE
.RE
.RS 4
.Sp
\&\fBverbose             2\fR
.Sp
.RS 4
The amount of information to print out when the program is run. Allowed values
are 1 through 5. The default is 2.
.Sp
1        Quiet            Show fatal errors only
.Sp
2        Default          Show warnings and errors
.Sp
3        Verbose          Show equivalent shell commands being executed
.Sp
4        Extra Verbose    Same as verbose, but with more detail
.Sp
5        Debug            All kinds of information
.RE
.RE
.RS 4
.Sp
\&\fBloglevel            3\fR
.Sp
.RS 4
This number means the same thing as \fBverbose\fR above, but it determines how
much data is written to the logfile, if one is being written.
.Sp
The only thing missing from this at the higher levels is the direct output
from rsync. We hope to add support for this in a future relase.
.RE
.RE
.RS 4
.Sp
\&\fBlogfile             /var/log/rsnapshot\fR
.Sp
.RS 4
Full filesystem path to the rsnapshot log file. If this is defined, a log file
will be written, with the amount of data being controlled by \fBloglevel\fR. If
this is commented out, no log file will be written.
.RE
.RE
.RS 4
.Sp
\&\fBinclude             ???\fR
.Sp
.RS 4
This gets passed directly to rsync using the \-\-include directive. This
parameter can be specified as many times as needed, with one pattern defined
per line. See the \fIrsync\fR\|(1) man page for the syntax.
.RE
.RE
.RS 4
.Sp
\&\fBexclude             ???\fR
.Sp
.RS 4
This gets passed directly to rsync using the \-\-exclude directive. This
parameter can be specified as many times as needed, with one pattern defined
per line. See the \fIrsync\fR\|(1) man page for the syntax.
.RE
.RE
.RS 4
.Sp
\&\fBinclude_file        /path/to/include/file\fR
.Sp
.RS 4
This gets passed directly to rsync using the \-\-include\-from directive. See the
\&\fIrsync\fR\|(1) man page for the syntax.
.RE
.RE
.RS 4
.Sp
\&\fBexclude_file        /path/to/exclude/file\fR
.Sp
.RS 4
This gets passed directly to rsync using the \-\-exclude\-from directive. See the
\&\fIrsync\fR\|(1) man page for the syntax.
.RE
.RE
.RS 4
.Sp
\&\fBrsync_short_args    \-a\fR
.Sp
.RS 4
List of short arguments to pass to rsync. If not specified,
\&\*(L"\-a\*(R" is the default. Please note that these must be all next to each other.
For example, \*(L"\-az\*(R" is valid, while \*(L"\-a \-z\*(R" is not.
.RE
.RE
.RS 4
.Sp
\&\fBrsync_long_args     \-\-delete \-\-numeric\-ids \-\-relative \-\-delete\-excluded\fR
.Sp
.RS 4
List of long arguments to pass to rsync. Beginning with rsnapshot 1.2.0, this
default has changed. In previous versions, the default values were
.Sp
.Vb 1
\&    --delete --numeric-ids
.Ve
.Sp
Starting with version 1.2.0, the default values are
.Sp
.Vb 1
\&    --delete --numeric-ids --relative --delete-excluded
.Ve
.Sp
This directly affects how the destination paths in your backup points are
constructed. Depending on what behaviour you want, you can explicitly set
the values to make the program behave like the old version or the current
version. The newer settings are recommended if you're just starting. If
you are upgrading, read the upgrade guide in the \s-1INSTALL\s0 file in the
source distribution for more information.
.RE
.RE
.RS 4
.Sp
\&\fBssh_args			\-p 22\fR
.Sp
.RS 4
Arguments to be passed to ssh. If not specified, the default is none.
.RE
.RE
.RS 4
.Sp
\&\fBlockfile    /var/run/rsnapshot.pid\fR
.Sp
.RS 4
Lockfile to use when rsnapshot is run. This prevents a second invocation
from clobbering the first one. If not specified, no lock file is used.
Make sure to use a directory that is not world writeable for security
reasons.
.RE
.RE
.RS 4
.Sp
\&\fBone_fs  1\fR
.Sp
.RS 4
Prevents rsync from crossing filesystem partitions. Setting this to a value
of 1 enables this feature. 0 turns it off. This parameter is optional.
The default is off.
.RE
.RE
.RS 4
.Sp
\&\fB\s-1UPGRADE\s0 \s-1NOTICE:\s0\fR
.Sp
.RS 4
If you have used an older version of rsnapshot, you might notice that the
destination paths on the backup points have changed. Please read the \s-1INSTALL\s0
file in the source distribution for upgrade options.
.RE
.RE
.RS 4
.Sp
\&\fBbackup\fR  /etc/                       localhost/
.Sp
\&\fBbackup\fR  root@example.com:/etc/      example.com/
.Sp
\&\fBbackup\fR  rsync://example.com/path2/  example.com/
.Sp
\&\fBbackup\fR  /var/                       localhost/      one_fs=1
.Sp
\&\fBbackup_script\fR   /usr/local/bin/backup_pgsql.sh    pgsql_backup/
.Sp
.RS 4
Examples:
.Sp
\&\fBbackup   /etc/        localhost/\fR
.Sp
.RS 4
Backs up /etc/ to <snapshot_root>/<interval>.0/localhost/etc/ using rsync on
the local filesystem
.RE
.RE
.RS 4
.Sp
\&\fBbackup   /usr/local/  localhost/\fR
.Sp
.RS 4
Backs up /usr/local/ to <snapshot_root>/<interval>.0/localhost/usr/local/
using rsync on the local filesystem
.RE
.RE
.RS 4
.Sp
\&\fBbackup   root@example.com:/etc/       example.com/\fR
.Sp
.RS 4
Backs up root@example.com:/etc/ to <snapshot_root>/<interval>.0/example.com/etc/
using rsync over ssh
.RE
.RE
.RS 4
.Sp
\&\fBbackup   root@example.com:/usr/local/ example.com/\fR
.Sp
.RS 4
Backs up root@example.com:/usr/local/ to
<snapshot_root>/<interval>.0/example.com/usr/local/ using rsync over ssh
.RE
.RE
.RS 4
.Sp
\&\fBbackup   rsync://example.com/pub/      example.com/\fR
.Sp
.RS 4
Backs up rsync://example.com/pub/ to <snapshot_root>/<interval>.0/example.com/pub/
using an anonymous rsync server
.RE
.RE
.RS 4
.Sp
\&\fBbackup   /var/     localhost/   one_fs=1\fR
.Sp
.RS 4
This is the same as the other examples, but notice how the fourth parameter
is passed. This sets this backup point to not span filesystem partitions.
If the global one_fs has been set, this will override it locally.
.RE
.RE
.RS 4
.Sp
\&\fBbackup_script      /usr/local/bin/backup_database.sh   db_backup/\fR
.Sp
.RS 4
In this example, we specify a script or program to run. This script should simply
create files and/or directories in it's current working directory. rsnapshot will
then take that output and move it into the directory specified in the third column.
.Sp
Please note that whatever is in the destination directory will be completely
deleted and recreated. For this reason, rsnapshot prevents you from specifying
a destination directory for a backup_script that will clobber other backups.
.Sp
So in this example, say the backup_database.sh script simply runs a command like:
.Sp
.RS 4
#!/bin/sh
.Sp
mysqldump \-uusername mydatabase > mydatabase.sql
.RE
.RE
.RS 4
.Sp
rsnapshot will take the generated \*(L"mydatabase.sql\*(R" file and move it into the
<snapshot_root>/<interval>.0/db_backup/ directory. On subsequent runs,
rsnapshot checks the differences between the files created against the
previous files. If the backup script generates the same output on the next
run, the files will be hard linked against the previous ones, and no
additional disk space will be taken up.
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
Remember that tabs must separate all elements, and that
there must be a trailing slash on the end of every directory.
.PP
A hash mark (#) on the beginning of a line is treated
as a comment.
.PP
Putting it all together (an example file):
.Sp
.RS 4
# \s-1THIS\s0 \s-1IS\s0 A \s-1COMMENT\s0, \s-1REMEMBER\s0 \s-1TABS\s0 \s-1MUST\s0 \s-1SEPERATE\s0 \s-1ALL\s0 \s-1ELEMENTS\s0
.Sp
\&\fBsnapshot_root\fR   /.snapshots/
.Sp
\&\fBcmd_rsync\fR       /usr/bin/rsync
.Sp
\&\fBcmd_ssh\fR         /usr/bin/ssh
.Sp
\&\fB#cmd_cp\fR         /bin/cp
.Sp
\&\fB#cmd_rm\fR         /bin/rm
.Sp
\&\fBcmd_logger\fR      /usr/bin/logger
.Sp
\&\fBinterval\fR        hourly  6
.Sp
\&\fBinterval\fR        daily   7
.Sp
\&\fBinterval\fR        weekly  7
.Sp
\&\fBinterval\fR        monthly 3
.Sp
\&\fBbackup\fR  /etc/                        localhost/
.Sp
\&\fBbackup\fR  /home/                       localhost/
.Sp
\&\fBbackup\fR  root@foo.com:/etc/           foo.com/
.Sp
\&\fBbackup\fR  root@foo.com:/home/          foo.com/
.Sp
\&\fBbackup\fR  root@mail.foo.com:/home/     mail.foo.com/
.Sp
\&\fBbackup\fR  rsync://example.com/pub/     example.com/
.Sp
\&\fBbackup_script\fR    /usr/local/bin/backup_database.sh    db_backup/
.RE
.SH "USAGE"
.IX Header "USAGE"
\&\fBrsnapshot\fR can be used by any user, but for system-wide backups
you will probably want to run it as root.
.PP
Since backups usually get neglected if human intervention is
required, the preferred way is to run it from cron.
.PP
When you are first setting up your backups, you will probably
also want to run it from the command line once or twice to get
a feel for what it's doing.
.PP
Here is an example crontab entry, assuming that intervals \fBhourly\fR,
\&\fBdaily\fR, \fBweekly\fR and \fBmonthly\fR have been defined in \fB/etc/rsnapshot.conf\fR
.Sp
.RS 4
\&\fB0 */4 * * *         /usr/local/bin/rsnapshot hourly\fR
.Sp
\&\fB50 23 * * *         /usr/local/bin/rsnapshot daily\fR
.Sp
\&\fB40 23 1,8,15,22 * * /usr/local/bin/rsnapshot weekly\fR
.Sp
\&\fB30 23 1 * *         /usr/local/bin/rsnapshot monthly\fR
.RE
.PP
This example will do the following:
.Sp
.RS 4
6 hourly backups a day (once every 4 hours, at 0,4,8,12,16,20)
.Sp
1 daily backup every day, at 11:50PM
.Sp
4 weekly backups a month, at 11:40PM, on the 1st, 8th, 15th, and 22nd
.Sp
1 monthly backup every month, at 11:30PM on the 1st day of the month
.RE
.PP
It is usually a good idea to schedule the larger intervals to run a bit before the
lower ones. For example, in the crontab above, notice that \*(L"daily\*(R" runs 10 minutes
before \*(L"hourly\*(R". This helps prevent race conditions where the \*(L"daily\*(R" would try to
run before the \*(L"hourly\*(R" job had finished. This is where the \fBlockfile\fR parameter
really comes in handy.
.PP
Remember that these are just the times that the program runs.
To set the number of backups stored, set the \fBinterval\fR numbers in
\&\fB/etc/rsnapshot.conf\fR
.PP
To check the disk space used by rsnapshot, you can call it with the \*(L"du\*(R" argument.
.PP
For example:
.Sp
.RS 4
\&\fB/usr/local/bin/rsnapshot du\fR
.RE
.PP
This will show you exactly how much disk space is taken up in the snapshot root. This
feature requires the \s-1UNIX\s0 \fBdu\fR command to be installed on your system, for it to
support the \*(L"\-csh\*(R" command line arguments, and to be in your path.
.SH "EXIT VALUES"
.IX Header "EXIT VALUES"
.RS 4
\&\fB0\fR  All operations completed successfully
.Sp
\&\fB1\fR  A fatal error occurred
.Sp
\&\fB2\fR  Some warnings occurred, but the backup still finished
.RE
.SH "FILES"
.IX Header "FILES"
/etc/rsnapshot.conf
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIrsync\fR\|(1), \fIssh\fR\|(1), \fIlogger\fR\|(1), \fIsshd\fR\|(1), \fIssh\-keygen\fR\|(1), \fIperl\fR\|(1), \fIcp\fR\|(1), \fIdu\fR\|(1), \fIcrontab\fR\|(1)
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Use the \fB\-t\fR flag to see what commands would have been executed. This will show
you the commands rsnapshot would try to run. There are a few minor differences
(for example, not showing an attempt to remove the lockfile because it wasn't
really created in the test), but should give you a very good idea what will happen.
.PP
Using the \fB\-v\fR, \fB\-V\fR, and \fB\-D\fR flags will print increasingly more information
to \s-1STDOUT\s0.
.PP
Make sure you don't have spaces in the config file that you think are actually tabs.
.PP
Much other weird behavior can probably be attributed to plain old file system
permissions and ssh authentication issues.
.SH "BUGS"
.IX Header "BUGS"
Swat them, or report them to \fBnathan@rsnapshot.org\fR
.SH "NOTES"
.IX Header "NOTES"
Make sure your /etc/rsnapshot.conf file has all elements separated by tabs.
See /etc/rsnapshot.conf.default for a working example file.
.PP
Make sure you put a trailing slash on the end of all directory references.
If you don't, you may have extra directories created in your snapshots.
For more information on how the trailing slash is handled, see the
\&\fB\f(BIrsync\fB\|(1)\fR manpage.
.PP
Make sure to make the snapshot directory chmod 700 and owned by root
(assuming backups are made by the root user). If the snapshot directory
is readable by other users, they will be able to modify the snapshots
containing their files, thus destroying the integrity of the snapshots.
.PP
If you would like regular users to be able to restore their own backups,
there are a number of ways this can be accomplished. One such scenario
would be:
.PP
Set \fBsnapshot_root\fR to \fB/.private/.snapshots\fR in \fB/etc/rsnapshot.conf\fR
.PP
Set the file permissions on these directories as follows:
.Sp
.RS 4
drwx\-\-\-\-\-\-    /.private
.Sp
drwxr-xr-x    /.private/.snapshots
.RE
.PP
Export the /.private/.snapshots directory over read-only \s-1NFS\s0, a read-only
Samba share, etc.
.PP
See the rsnapshot \s-1HOWTO\s0 for more information on making backups
accessible to non-privileged users.
.PP
For ssh to work unattended through cron, you will probably want to use
public key logins. Create an ssh key with no passphrase for root, and
install the public key on each machine you want to backup. If you are
backing up system files from remote machines, this probably means
unattended root logins. Another possibility is to create a second user
on the machine just for backups. Give the user a different name such
as \*(L"rsnapshot\*(R", but keep the \s-1UID\s0 and \s-1GID\s0 set to 0, to give root
privileges. However, make logins more restrictive, either through ssh
configuration, or using an alternate shell.
.PP
\&\s-1BE\s0 \s-1CAREFUL\s0! If the private key is obtained by an attacker, they will
have free run of all the systems involved. If you are unclear on how
to do this, see \fB\f(BIssh\fB\|(1)\fR, \fB\f(BIsshd\fB\|(1)\fR, and \fB\f(BIssh\-keygen\fB\|(1)\fR.
.PP
Backup scripts are run as the same user that rsnapshot is running as.
Typically this is root. Make sure that all of your backup scripts are
only writable by root, and that they don't call any other programs
that aren't owned by root. If you fail to do this, anyone who can
write to the backup script or any program it calls can fully take
over the machine. Of course, this is not a situation unique to
rsnapshot.
.PP
By default, rsync transfers are done using the \-\-numeric\-ids option.
This means that user names and group names are ignored during transfers,
but the \s-1UID/GID\s0 information is kept intact. The assumption is that the
backups will be restored in the same environment they came from. Without
this option, restoring backups for multiple heterogeneous servers would
be unmanageable. If you are archiving snapshots with \s-1GNU\s0 tar, you may
want to use the \-\-numeric\-owner parameter. Also, keep a copy of the
archived system's /etc/passwd and /etc/group files handy for the \s-1UID/GID\s0
to name mapping.
.PP
If you remove backup points in the config file, the previously archived
files under those points will permanently stay in the snapshots directory
unless you remove the files yourself. If you want to conserve disk space,
you will need to go into the <snapshot_root> directory and manually
remove the files from the smallest interval's \*(L".0\*(R" directory.
.PP
For example, if you were previously backing up /home/ with a destination
of localhost/, and hourly is your smallest interval, you would need to do
the following to reclaim that disk space:
.Sp
.RS 4
rm \-rf <snapshot_root>/hourly.0/localhost/home/
.RE
.PP
Please note that the other snapshots previously made of /home/ will still
be using that disk space, but since the files are flushed out of hourly.0/,
they will no longer be copied to the subsequent directories, and will thus
be removed in due time as the rotations happen.
.SH "AUTHORS"
.IX Header "AUTHORS"
Mike Rubel \- \fBhttp://www.mikerubel.org/computers/rsync_snapshots/\fR
.Sp
.RS 4
\&\- Created the original shell scripts on which this project is based
.RE
.PP
Nathan Rosenquist (\fBnathan@rsnapshot.org\fR)
.Sp
.RS 4
\&\- Primary author and maintainer of rsnapshot.
.RE
.PP
Carl Wilhelm Soderstrom \fB(chrome@real\-time.com)\fR
.Sp
.RS 4
\&\- Created the \s-1RPM\s0 .spec file which allowed the \s-1RPM\s0 package to be built, among
other things.
.RE
.PP
Ted Zlatanov (\fBtzz@lifelogs.com\fR)
.Sp
.RS 4
\&\- Added the one_fs feature, autoconf support, good advice, and much more.
.RE
.PP
Ralf van Dooren (\fBr.vdooren@snow.nl\fR)
.Sp
.RS 4
\&\- Added and maintains the rsnapshot entry in the FreeBSD ports tree.
.RE
.PP
SlapAyoda
.Sp
.RS 4
\&\- Provided access to his computer museum for software testing.
.RE
.PP
Carl Boe (\fBboe@demog.berkeley.edu\fR)
.Sp
.RS 4
\&\- Found several subtle bugs and provided fixes for them.
.RE
.PP
Shane Leibling (\fBshane@cryptio.net\fR)
.Sp
.RS 4
\&\- Fixed a compatibility bug in utils/backup_smb_share.sh
.RE
.PP
Christoph Wegscheider (\fBchristoph.wegscheider@wegi.net\fR)
.Sp
.RS 4
\&\- Added and maintains the Debian rsnapshot package.
.RE
.PP
Bharat Mediratta (\fBbharat@menalto.com\fR)
.Sp
.RS 4
\&\- Improved the exclusion rules to avoid backing up the snapshot root (among
other things).
.RE
.PP
Peter Palfrader (\fBweasel@debian.org\fR)
.Sp
.RS 4
\&\- Enhanced error reporting to include command line options.
.RE
.PP
Nicolas Kaiser <nikai@nikai.net>
.Sp
.RS 4
\&\- Fixed typos in program and man page
.RE
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2005 Nathan Rosenquist
.PP
Portions Copyright (C) 2002\-2005 Mike Rubel, Carl Wilhelm Soderstrom,
Ted Zlatanov, Carl Boe, Shane Liebling, Bharat Mediratta, Peter Palfrader
.PP
This man page is distributed under the same license as rsnapshot:
the \s-1GPL\s0 (see below).
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA\s0
