.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RSNAPSHOT 1"
.TH RSNAPSHOT 1 "2004-05-15" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
rsnapshot \- remote filesystem snapshot utility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBrsnapshot\fR [\fB\-vtxqVD\fR] [\fB\-c\fR cfgfile] [command]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBrsnapshot\fR is a filesystem snapshot utility. It can take incremental
snapshots of local and remote filesystems for any number of machines.
.PP
Local filesystem snapshots are handled with \fB\f(BIrsync\fB\|(1)\fR. Secure remote
connections are handled with rsync over \fB\f(BIssh\fB\|(1)\fR, while anonymous
rsync connections simply use an rsync server. Both remote and local
transfers depend on rsync.
.PP
\&\fBrsnapshot\fR saves much more disk space than you might imagine. The amount
of space required is roughly the size of one full backup, plus a copy
of each additional file that is changed. \fBrsnapshot\fR makes extensive
use of hard links, so if the file doesn't change, the next snapshot is
simply a hard link to the exact same file.
.PP
\&\fBrsnapshot\fR will typically be invoked as root by a cron job, or series
of cron jobs. It is possible, however, to run as any arbitrary user
with an alternate configuration file.
.PP
All important options are specified in a configuration file, which is
located by default at \fB/etc/rsnapshot.conf\fR. An alternate one can be
specified on the command line. There are also additional options which
can be passed on the command line.
.PP
The command line options are as follows:
.Sp
.RS 4
\&\fB\-v\fR verbose, show shell commands being executed
.Sp
\&\fB\-t\fR test, show shell commands that would be executed
.Sp
\&\fB\-c\fR path to alternate config file
.Sp
\&\fB\-x\fR one filesystem, don't cross partitions within each backup point
.Sp
\&\fB\-q\fR quiet, supress non-fatal warnings
.Sp
\&\fB\-V\fR same as \-v, but show rsync output as well
.Sp
\&\fB\-D\fR a firehose of diagnostic information
.RE
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
\&\fB/etc/rsnapshot.conf\fR is the default configuration file. All parameters
in this file must be seperated by tabs. \fB/etc/rsnapshot.conf.default\fR
can be used as a syntactically valid reference.
.PP
It is recommended that you copy \fB/etc/rsnapshot.conf.default\fR to
\&\fB/etc/rsnapshot.conf\fR, and then modify \fB/etc/rsnapshot.conf\fR to suit
your needs. What follows here is a list of allowed parameters:
.Sp
.RS 4
\&\fBsnapshot_root\fR local filesystem path to save all snapshots
.Sp
\&\fBcmd_rsync\fR     Full path to rsync (required)
.Sp
\&\fBcmd_ssh\fR       Full path to ssh (optional)
.Sp
\&\fBcmd_cp\fR        Full path to cp  (optional, but must be \s-1GNU\s0 version)
.Sp
\&\fBcmd_rm\fR        Full path to rm  (optional)
.Sp
\&\fBcmd_logger\fR    Full path to logger (optional, for syslog support)
.Sp
.RS 4
If you have \s-1GNU\s0 cp, you should uncomment cmd_cp, since you will get extra
functionality. If you don't have \s-1GNU\s0 cp, leave it commented out, and
rsnapshot will work almost as well. If you are using Linux, you have \s-1GNU\s0
cp. If you're on \s-1BSD\s0, Solaris, \s-1IRIX\s0, etc., then there's a good chance you
don't have the right version. Never fear, you still have options. You can
get \s-1GNU\s0 cp set up on your system (possibly in an alternate path so as to
not conflict with your existing version). Or, if you only need support
for normal files, directories, and symlinks, you can just leave cmd_cp
commented out and rsnapshot will use a built-in perl substitute. This
will run about 40% slower, and will not let you back up the following
types of files:
.Sp
.RS 4
\&\s-1FIFO\s0
.Sp
Socket
.Sp
Block / Character devices
.RE
.RE
.RS 4
.Sp
Furthermore, hard links to symlinks are not portable, so new symlinks
will be created when they need to be copied.
.RE
.RE
.RS 4
.Sp
\&\fBinterval\fR      [name] [number]
.Sp
.RS 4
\&\*(L"name\*(R" refers to the name of this interval (i.e. hourly, daily). \*(L"number\*(R"
is the number of snapshots for this type of interval that will be stored.
The value of \*(L"name\*(R" will be the command passed to \fBrsnapshot\fR to perform
this type of backup.
.Sp
Example: \fBinterval hourly 6\fR
.Sp
[root@localhost]# \fBrsnapshot hourly\fR
.Sp
For this example, every time this is run, the following will happen:
.Sp
<snapshot_root>/hourly.5/ will be deleted, if it exists.
.Sp
<snapshot_root>/hourly.{1,2,3,4} will all be rotated +1, if they exist.
.Sp
<snapshot_root>/hourly.0/ will be copied to <snapshot_root>/hourly.1/
using hard links.
.Sp
Each backup point in <snapshot_root>/hourly.0/ will be rsynced with the
backup points specified in this config file later.
.Sp
Intervals must be specified in the config file in order, from most
frequent to least frequent. The first entry is the one which will be
synced with the backup points. The subsequent intervals (i.e. daily,
weekly, etc) simply rotate, with each higher interval pulling from the
one below it for its .0 directory.
.Sp
Example:
.Sp
.RS 4
\&\fBinterval  hourly 6\fR
.Sp
\&\fBinterval  daily  7\fR
.Sp
\&\fBinterval  weekly 4\fR
.RE
.RE
.RS 4
.Sp
daily.0/ will be copied from hourly.5/, and weekly.0/ will be copied from daily.6/
.Sp
hourly.0/ will be rsynced directly from the filesystem.
.RE
.RE
.RS 4
.Sp
\&\fBlink_dest           1\fR
.Sp
.RS 4
If your version of rsync supports \-\-link\-dest (2.5.7 or newer), enable this to
let rsync handle some things that \s-1GNU\s0 cp or the built-in subroutines would
otherwise do. You should enable this if possible.
.RE
.RE
.RS 4
.Sp
\&\fBverbose             2\fR
.Sp
.RS 4
The amount of information to print out when the program is run. Allowed values
are 1 through 5. The default is 2.
.Sp
1        Quiet            Show fatal errors only
.Sp
2        Default          Show warnings and errors
.Sp
3        Verbose          Show equivalent shell commands being executed
.Sp
4        Extra Verbose    Same as verbose, but with still more output
.Sp
5        Debug            All kinds of information
.RE
.RE
.RS 4
.Sp
\&\fBloglevel            3\fR
.Sp
.RS 4
This number means the same thing as \fBverbose\fR above, but it determines how
much data is written to the logfile, if one is being written.
.RE
.RE
.RS 4
.Sp
\&\fBlogfile             /var/log/rsnapshot\fR
.Sp
.RS 4
Full filesystem path to the rsnapshot log file. If this is defined, a log file
will be written, with the amount of data being controlled by \fBloglevel\fR. If
this is commented out, no log file will be written.
.RE
.RE
.RS 4
.Sp
\&\fBinclude             ???\fR
.Sp
.RS 4
This gets passed directly to rsync using the \-\-include directive. This
parameter can be specified as many times as needed, with one pattern defined
per line. See the \fIrsync\fR\|(1) man page for the syntax.
.RE
.RE
.RS 4
.Sp
\&\fBexclude             ???\fR
.Sp
.RS 4
This gets passed directly to rsync using the \-\-exclude directive. This
parameter can be specified as many times as needed, with one pattern defined
per line. See the \fIrsync\fR\|(1) man page for the syntax.
.RE
.RE
.RS 4
.Sp
\&\fBinclude_file        /path/to/include/file\fR
.Sp
.RS 4
This gets passed directly to rsync using the \-\-include\-from directive. See the
\&\fIrsync\fR\|(1) man page for the syntax.
.RE
.RE
.RS 4
.Sp
\&\fBexclude_file        /path/to/exclude/file\fR
.Sp
.RS 4
This gets passed directly to rsync using the \-\-exclude\-from directive. See the
\&\fIrsync\fR\|(1) man page for the syntax.
.RE
.RE
.RS 4
.Sp
\&\fBrsync_short_args    \-a\fR
.Sp
.RS 4
List of short arguments to pass to rsync. If not specified,
\&\*(L"\-a\*(R" is the default. Please note that these must be all next to each other.
For example, \*(L"\-an\*(R" is valid, while \*(L"\-a \-n\*(R" is not.
.RE
.RE
.RS 4
.Sp
\&\fBrsync_long_args     \-\-delete \-\-numeric\-ids\fR
.Sp
.RS 4
List of long arguments to pass to rsync. If not specified,
\&\*(L"\-\-delete \-\-numeric\-ids\*(R" is the default.
.RE
.RE
.RS 4
.Sp
\&\fBssh_args			\-p 22\fR
.Sp
.RS 4
Arguments to be passed to ssh. If not specified, the default is none.
.RE
.RE
.RS 4
.Sp
\&\fBlockfile    /var/lock/subsys/rsnapshot\fR
.Sp
.RS 4
Lockfile to use when rsnapshot is run. This prevents a second invocation
from clobbering the first one. If not specified, no lock file is used.
Make sure to use a directory that is not world writeable for security
reasons.
.RE
.RE
.RS 4
.Sp
\&\fBone_fs  1\fR
.Sp
.RS 4
Prevents rsync from crossing filesystem partitions. Setting this to a value
of 1 enables this feature. 0 turns it off. This parameter is optional.
The default is off.
.RE
.RE
.RS 4
.Sp
\&\fBbackup\fR  /local/path/                localhost/path/
.Sp
\&\fBbackup\fR  root@example.com:/path/     example.com/path/
.Sp
\&\fBbackup\fR  rsync://example.com/path2/  example.com/path2/
.Sp
\&\fBbackup\fR  /local/path2/               localhost/path2/      one_fs=1
.Sp
\&\fBbackup_script\fR    /usr/local/bin/backup_database.sh    db_backup/
.Sp
.RS 4
Examples:
.Sp
\&\fBbackup   /etc/     etc/\fR
.Sp
.RS 4
Backs up /etc/ to <snapshot_root>/<interval>.0/etc/ using rsync on the local filesystem
.RE
.RE
.RS 4
.Sp
\&\fBbackup   root@example.com:/home/       example.com/home/\fR
.Sp
.RS 4
Backs up root@example.com:/home/ to <snapshot_root>/<interval>.0/example.com/home/
using rsync over ssh
.RE
.RE
.RS 4
.Sp
\&\fBbackup   rsync://example.com/pub/      example.com/pub/\fR
.Sp
.RS 4
Backs up rsync://example.com/pub/ to <snapshot_root>/<interval>.0/example.com/pub/
using an anonymous rsync server
.RE
.RE
.RS 4
.Sp
\&\fBbackup   /local/path2/    localhost/path2/    one_fs=1\fR
.Sp
.RS 4
This is the same as the first example, but notice how the fourth parameter is passed.
This sets this backup point to not span filesystem partitions. If the global one_fs
has been set, this will override it locally.
.RE
.RE
.RS 4
.Sp
\&\fBbackup_script      /usr/local/bin/backup_database.sh   db_backup/\fR
.Sp
.RS 4
In this example, we specify a script or program to run. This script should simply
create files and/or directories in it's current working directory. rsnapshot will
then take that output and move it into the directory specified in the third column.
So in this example, say the backup_database.sh script simply runs a command like:
.Sp
.RS 4
#!/bin/sh
.Sp
mysqldump \-uusername mydatabase > mydatabase.sql
.RE
.RE
.RS 4
.Sp
rsnapshot will take the generated \*(L"mydatabase.sql\*(R" file and move it into the
db_backup/ directory inside the snapshot interval, just the same as if it had
been sitting on the filesystem. If the backup script generates the same output
on the next run, no additional disk space will be taken up.
.RE
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP
Remember that tabs must seperate all elements, and that
there must be a trailing slash on the end of every directory.
.PP
A hash mark (#) on the beginning of a line is treated
as a comment.
.PP
Putting it all together (an example file):
.Sp
.RS 4
# \s-1THIS\s0 \s-1IS\s0 A \s-1COMMENT\s0, \s-1REMEMBER\s0 \s-1TABS\s0 \s-1MUST\s0 \s-1SEPERATE\s0 \s-1ALL\s0 \s-1ELEMENTS\s0
.Sp
\&\fBsnapshot_root\fR   /.snapshots/
.Sp
\&\fBcmd_rsync\fR       /usr/bin/rsync
.Sp
\&\fBcmd_ssh\fR         /usr/bin/ssh
.Sp
\&\fB#cmd_cp\fR         /bin/cp
.Sp
\&\fB#cmd_rm\fR         /bin/rm
.Sp
\&\fBcmd_logger\fR      /usr/bin/logger
.Sp
\&\fBinterval\fR        hourly  6
.Sp
\&\fBinterval\fR        daily   7
.Sp
\&\fBinterval\fR        weekly  7
.Sp
\&\fBinterval\fR        monthly 3
.Sp
\&\fBbackup\fR  /etc/                        localhost/etc/
.Sp
\&\fBbackup\fR  /home/                       localhost/home/
.Sp
\&\fBbackup\fR  root@foo.com:/etc/           foo.com/etc/
.Sp
\&\fBbackup\fR  root@foo.com:/home/          foo.com/home/
.Sp
\&\fBbackup\fR  root@mail.foo.com:/home/     mail.foo.com/home/
.Sp
\&\fBbackup\fR  rsync://example.com/pub/     example.com/pub/
.Sp
\&\fBbackup_script\fR    /usr/local/bin/backup_database.sh    db_backup/
.RE
.SH "USAGE"
.IX Header "USAGE"
\&\fBrsnapshot\fR can be used by any user, but for system-wide backups
you will probably want to run it as root. Since backups tend to
get neglected if human intervention is required, the preferred
way is to run it from cron.
.PP
Here is an example crontab entry, assuming that intervals \fBhourly\fR,
\&\fBdaily\fR, \fBweekly\fR and \fBmonthly\fR have been defined in \fB/etc/rsnapshot.conf\fR
.Sp
.RS 4
\&\fB0 */4 * * *         /usr/local/bin/rsnapshot hourly\fR
.Sp
\&\fB50 23 * * *         /usr/local/bin/rsnapshot daily\fR
.Sp
\&\fB40 23 1,8,15,22 * * /usr/local/bin/rsnapshot weekly\fR
.Sp
\&\fB30 23 1 * *         /usr/local/bin/rsnapshot monthly\fR
.RE
.PP
This example will do the following:
.Sp
.RS 4
6 hourly backups a day (once every 4 hours, at 0,4,8,12,16,20)
.Sp
1 daily backup every day, at 11:50PM
.Sp
4 weekly backups a month, at 11:40PM, on the 1st, 8th, 15th, and 22nd
.Sp
1 monthly backup every month, at 11:30PM on the 1st day of the month
.RE
.PP
Remember that these are just the times that the program runs.
To set the number of backups stored, set the interval numbers in \fB/etc/rsnapshot.conf\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
Based on code originally by Mike Rubel
.Sp
.RS 4
\&\fBhttp://www.mikerubel.org/computers/rsync_snapshots/\fR
.RE
.PP
Rewritten and expanded in Perl by Nathan Rosenquist
.Sp
.RS 4
\&\fBhttp://www.rsnapshot.org/\fR
.RE
.PP
Carl Wilhelm Soderstrom \fB(chrome@real\-time.com)\fR created the \s-1RPM\s0
\&.spec file which allowed the \s-1RPM\s0 package to be built, among other
things.
.PP
Ted Zlatanov (\fBtzz@lifelogs.com\fR) contributed code, advice, patches
and many good ideas.
.PP
Ralf van Dooren (\fBr.vdooren@snow.nl\fR) added and maintains the
rsnapshot entry in the FreeBSD ports tree.
.PP
Carl Boe (\fBboe@demog.berkeley.edu\fR) Found several subtle bugs and
provided fixes for them.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003\-2004 Nathan Rosenquist
.PP
Portions Copyright (C) 2002\-2003 Mike Rubel, Carl Wilhelm Soderstrom,
Ted Zlatanov
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA\s0
.SH "FILES"
.IX Header "FILES"
/etc/rsnapshot.conf
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIrsync\fR\|(1), \fIssh\fR\|(1), \fIlogger\fR\|(1), \fIsshd\fR\|(1), \fIssh\-keygen\fR\|(1), \fIperl\fR\|(1), \fIcp\fR\|(1)
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Use the \fB\-t\fR flag to see what commands would have been executed. The
\&\fB\-v\fR, \fB\-V\fR, and \fB\-D\fR flags will print increasingly more information.
Much weird behavior can probably be attributed to plain old file system
permissions and ssh authentication issues.
.SH "BUGS"
.IX Header "BUGS"
Swat them, or report them to \fBnathan@rsnapshot.org\fR
.SH "NOTES"
.IX Header "NOTES"
Make sure your /etc/rsnapshot.conf file has all elements seperated by tabs.
See /etc/rsnapshot.conf.default for a working example file.
.PP
Make sure you put a trailing slash on the end of all directory references.
If you don't, you may have extra directories created in your snapshots.
For more information on how the trailing slash is handled, see the
\&\fB\f(BIrsync\fB\|(1)\fR manpage.
.PP
Make sure your snapshot directory is only readable by root. If you would
like regular users to be able to restore their own backups, there are a
number of ways this can be accomplished. One such scenario would be:
.PP
Set \fBsnapshot_root\fR to \fB/.private/.snapshots\fR in \fB/etc/rsnapshot.conf\fR
.PP
Set the file permissions on these directories as follows:
.Sp
.RS 4
drwx\-\-\-\-\-\-    /.private
.Sp
drwxr-xr-x    /.private/.snapshots
.RE
.PP
Export the /.private/.snapshots directory over read-only \s-1NFS\s0, a read-only
Samba share, etc.
.PP
If you do not plan on making the backups readable by regular users, be
sure to make the snapshot directory chmod 700 root. If the snapshot
directory is readable by other users, they will be able to modify the
snapshots containing their files, thus destroying the integrity of the
snapshots.
.PP
For ssh to work unattended through cron, you will probably want to use
public key logins. Create an ssh key with no passphrase for root, and
install the public key on each machine you want to backup. If you are
backing up system files from remote machines, this probably means
unattended root logins. Another posibility is to create a second user
on the machine just for backups. Give the user a different name such
as \*(L"rsnapshot\*(R", but keep the \s-1UID\s0 and \s-1GID\s0 set to 0, to give root
privileges. However, make logins more restrictive, either through ssh
configuration, or using an alternate shell such as \fBscponly\fR.
.PP
\&\s-1BE\s0 \s-1CAREFUL\s0! If the private key is obtained by an attacker, they will
have free run of all the systems involved. If you are unclear on how
to do this, see \fB\f(BIssh\fB\|(1)\fR, \fB\f(BIsshd\fB\|(1)\fR, and \fB\f(BIssh\-keygen\fB\|(1)\fR.
.PP
Backup scripts are run as the same user that rsnapshot is running as.
Typically this is root. Make sure that all of your backup scripts are
only writable by root, and that they don't call any other programs
that aren't owned by root. If you fail to do this, anyone who can
write to the backup script or any program it calls can fully take
over the machine. Of course, this is not a situation unique to
rsnapshot.
.PP
rsync transfers are done using the \-\-numeric\-ids option. This means that
user names and group names are ignored during transfers, but the \s-1UID/GID\s0
information is kept intact. The assumption is that the backups will be
restored in the same environment they came from. Without this option,
multi-server backups would be unmanageable.
.PP
If you remove backup points in the config file, the previously archived
files under those points will permanently stay in the snapshots directory
unless you remove the files yourself. If you want to conserve disk space,
you will need to go into the <snapshot_root> directory and manually
remove the files from the smallest interval's \*(L".0\*(R" directory.
.PP
For example, if you were previously backing up /home/ in home/, and
hourly is your smallest interval, you would need to do the following to
reclaim that disk space:
.Sp
.RS 4
rm \-rf <snapshot_root>/hourly.0/home/
.RE
.PP
Please note that the other snapshots previously made of /home/ will still
be using that disk space, but since the files are flushed out of hourly.0/,
they will no longer be copied to the subsequent directories, and will thus
be removed in due time as the rotations happen.
